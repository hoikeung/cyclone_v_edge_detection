--parallel_add DEVICE_FAMILY="Cyclone V" MSW_SUBTRACT="NO" PIPELINE=0 REPRESENTATION="UNSIGNED" RESULT_ALIGNMENT="LSB" SHIFT=0 SIZE=2 WIDTH=24 WIDTHR=25 data result
--VERSION_BEGIN 18.1 cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_padd 2018:09:12:13:04:24:SJ cbx_parallel_add 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ cbx_util_mgl 2018:09:12:13:04:24:SJ  VERSION_END


-- Copyright (C) 2018  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details.


FUNCTION soft (in)
RETURNS ( out);

--synthesis_resources = lut 50 
SUBDESIGN par_add_0oe
( 
	data[47..0]	:	input;
	result[24..0]	:	output;
) 
VARIABLE
	add1_result[24..0]	:	WIRE;
	sft2a[24..0] : soft;
	sft3a[24..0] : soft;
	sft4a[24..0] : soft;
	sft5a[24..0] : soft;
	w176w[24..0]	: WIRE;
	w76w	: WIRE;

BEGIN 
	add1_result[] = sft2a[].out + sft3a[].out + sft4a[].out;
	sft2a[].in = ( w76w, ( data[23..23], ( data[22..22], ( data[21..21], ( data[20..20], ( data[19..19], ( data[18..18], ( data[17..17], ( data[16..16], ( data[15..15], ( data[14..14], ( data[13..13], ( data[12..12], ( data[11..11], ( data[10..10], ( data[9..9], ( data[8..8], ( data[7..7], ( data[6..6], ( data[5..5], ( data[4..4], ( data[3..3], ( data[2..2], ( data[1..0]))))))))))))))))))))))));
	sft3a[].in = ( w76w, ( data[47..47], ( data[46..46], ( data[45..45], ( data[44..44], ( data[43..43], ( data[42..42], ( data[41..41], ( data[40..40], ( data[39..39], ( data[38..38], ( data[37..37], ( data[36..36], ( data[35..35], ( data[34..34], ( data[33..33], ( data[32..32], ( data[31..31], ( data[30..30], ( data[29..29], ( data[28..28], ( data[27..27], ( data[26..26], ( data[25..24]))))))))))))))))))))))));
	sft4a[].in = ( w76w, ( w76w, ( w76w, ( w76w, ( w76w, ( w76w, ( w76w, ( w76w, ( w76w, ( w76w, ( w76w, ( w76w, ( w76w, ( w76w, ( w76w, ( w76w, ( w76w, ( w76w, ( w76w, ( w76w, ( w76w, ( w76w, ( w76w, ( w76w, w76w))))))))))))))))))))))));
	sft5a[].in = add1_result[];
	result[24..0] = w176w[24..0];
	w176w[] = ( sft5a[24..23].out, sft5a[22..21].out, sft5a[20..19].out, sft5a[18..17].out, sft5a[16..15].out, sft5a[14..13].out, sft5a[12..11].out, sft5a[10..9].out, sft5a[8..7].out, sft5a[6..5].out, sft5a[4..3].out, sft5a[2..1].out, sft5a[0..0].out);
	w76w = B"0";
END;
--VALID FILE
